// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gradients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GradientsClient is the client API for Gradients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradientsClient interface {
	// Sends a dc, dm
	SendDcDm(ctx context.Context, in *DcDmRequest, opts ...grpc.CallOption) (*DcDmReply, error)
	SendQueryByEpochID(ctx context.Context, in *EpochIDRequest, opts ...grpc.CallOption) (*EpochIDReply, error)
}

type gradientsClient struct {
	cc grpc.ClientConnInterface
}

func NewGradientsClient(cc grpc.ClientConnInterface) GradientsClient {
	return &gradientsClient{cc}
}

func (c *gradientsClient) SendDcDm(ctx context.Context, in *DcDmRequest, opts ...grpc.CallOption) (*DcDmReply, error) {
	out := new(DcDmReply)
	err := c.cc.Invoke(ctx, "/gradients.Gradients/SendDcDm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradientsClient) SendQueryByEpochID(ctx context.Context, in *EpochIDRequest, opts ...grpc.CallOption) (*EpochIDReply, error) {
	out := new(EpochIDReply)
	err := c.cc.Invoke(ctx, "/gradients.Gradients/SendQueryByEpochID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradientsServer is the server API for Gradients service.
// All implementations must embed UnimplementedGradientsServer
// for forward compatibility
type GradientsServer interface {
	// Sends a dc, dm
	SendDcDm(context.Context, *DcDmRequest) (*DcDmReply, error)
	SendQueryByEpochID(context.Context, *EpochIDRequest) (*EpochIDReply, error)
	mustEmbedUnimplementedGradientsServer()
}

// UnimplementedGradientsServer must be embedded to have forward compatible implementations.
type UnimplementedGradientsServer struct {
}

func (UnimplementedGradientsServer) SendDcDm(context.Context, *DcDmRequest) (*DcDmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDcDm not implemented")
}
func (UnimplementedGradientsServer) SendQueryByEpochID(context.Context, *EpochIDRequest) (*EpochIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQueryByEpochID not implemented")
}
func (UnimplementedGradientsServer) mustEmbedUnimplementedGradientsServer() {}

// UnsafeGradientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradientsServer will
// result in compilation errors.
type UnsafeGradientsServer interface {
	mustEmbedUnimplementedGradientsServer()
}

func RegisterGradientsServer(s grpc.ServiceRegistrar, srv GradientsServer) {
	s.RegisterService(&Gradients_ServiceDesc, srv)
}

func _Gradients_SendDcDm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DcDmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradientsServer).SendDcDm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gradients.Gradients/SendDcDm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradientsServer).SendDcDm(ctx, req.(*DcDmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradients_SendQueryByEpochID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradientsServer).SendQueryByEpochID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gradients.Gradients/SendQueryByEpochID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradientsServer).SendQueryByEpochID(ctx, req.(*EpochIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gradients_ServiceDesc is the grpc.ServiceDesc for Gradients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gradients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gradients.Gradients",
	HandlerType: (*GradientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDcDm",
			Handler:    _Gradients_SendDcDm_Handler,
		},
		{
			MethodName: "SendQueryByEpochID",
			Handler:    _Gradients_SendQueryByEpochID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gradients.proto",
}
